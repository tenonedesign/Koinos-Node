// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: koinos/chain/chain.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Koinos_Chain_privilege: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case kernelMode // = 0
  case userMode // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .kernelMode
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .kernelMode
    case 1: self = .userMode
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .kernelMode: return 0
    case .userMode: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Koinos_Chain_privilege: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Koinos_Chain_privilege] = [
    .kernelMode,
    .userMode,
  ]
}

#endif  // swift(>=4.2)

enum Koinos_Chain_dsa: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case ecdsaSecp256K1 // = 0
  case UNRECOGNIZED(Int)

  init() {
    self = .ecdsaSecp256K1
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ecdsaSecp256K1
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .ecdsaSecp256K1: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Koinos_Chain_dsa: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Koinos_Chain_dsa] = [
    .ecdsaSecp256K1,
  ]
}

#endif  // swift(>=4.2)

struct Koinos_Chain_error_data {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Chain_result {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Koinos_Chain_result.OneOf_Value? = nil

  var object: Data {
    get {
      if case .object(let v)? = value {return v}
      return Data()
    }
    set {value = .object(newValue)}
  }

  var error: Koinos_Chain_error_data {
    get {
      if case .error(let v)? = value {return v}
      return Koinos_Chain_error_data()
    }
    set {value = .error(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case object(Data)
    case error(Koinos_Chain_error_data)

  #if !swift(>=4.1)
    static func ==(lhs: Koinos_Chain_result.OneOf_Value, rhs: Koinos_Chain_result.OneOf_Value) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.object, .object): return {
        guard case .object(let l) = lhs, case .object(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Koinos_Chain_object_space {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var system: Bool = false

  var zone: Data = Data()

  var id: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Chain_database_key {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var space: Koinos_Chain_object_space {
    get {return _space ?? Koinos_Chain_object_space()}
    set {_space = newValue}
  }
  /// Returns true if `space` has been explicitly set.
  var hasSpace: Bool {return self._space != nil}
  /// Clears the value of `space`. Subsequent reads from it will return its default value.
  mutating func clearSpace() {self._space = nil}

  var key: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _space: Koinos_Chain_object_space? = nil
}

struct Koinos_Chain_max_account_resources {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Chain_head_info {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var headTopology: Koinos_block_topology {
    get {return _headTopology ?? Koinos_block_topology()}
    set {_headTopology = newValue}
  }
  /// Returns true if `headTopology` has been explicitly set.
  var hasHeadTopology: Bool {return self._headTopology != nil}
  /// Clears the value of `headTopology`. Subsequent reads from it will return its default value.
  mutating func clearHeadTopology() {self._headTopology = nil}

  var headBlockTime: UInt64 = 0

  var lastIrreversibleBlock: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _headTopology: Koinos_block_topology? = nil
}

struct Koinos_Chain_caller_data {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var caller: Data = Data()

  var callerPrivilege: Koinos_Chain_privilege = .kernelMode

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Chain_argument_data {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entryPoint: UInt32 = 0

  var arguments: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Chain_resource_limit_data {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var diskStorageLimit: UInt64 = 0

  var diskStorageCost: UInt64 = 0

  var networkBandwidthLimit: UInt64 = 0

  var networkBandwidthCost: UInt64 = 0

  var computeBandwidthLimit: UInt64 = 0

  var computeBandwidthCost: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Chain_contract_metadata_object {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: Data = Data()

  var system: Bool = false

  var authorizesCallContract: Bool = false

  var authorizesTransactionApplication: Bool = false

  var authorizesUploadContract: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Chain_compute_bandwidth_entry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var compute: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Chain_compute_bandwidth_registry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [Koinos_Chain_compute_bandwidth_entry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Chain_genesis_entry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var space: Koinos_Chain_object_space {
    get {return _space ?? Koinos_Chain_object_space()}
    set {_space = newValue}
  }
  /// Returns true if `space` has been explicitly set.
  var hasSpace: Bool {return self._space != nil}
  /// Clears the value of `space`. Subsequent reads from it will return its default value.
  mutating func clearSpace() {self._space = nil}

  var key: Data = Data()

  var value: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _space: Koinos_Chain_object_space? = nil
}

struct Koinos_Chain_genesis_data {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [Koinos_Chain_genesis_entry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Koinos_Chain_privilege: @unchecked Sendable {}
extension Koinos_Chain_dsa: @unchecked Sendable {}
extension Koinos_Chain_error_data: @unchecked Sendable {}
extension Koinos_Chain_result: @unchecked Sendable {}
extension Koinos_Chain_result.OneOf_Value: @unchecked Sendable {}
extension Koinos_Chain_object_space: @unchecked Sendable {}
extension Koinos_Chain_database_key: @unchecked Sendable {}
extension Koinos_Chain_max_account_resources: @unchecked Sendable {}
extension Koinos_Chain_head_info: @unchecked Sendable {}
extension Koinos_Chain_caller_data: @unchecked Sendable {}
extension Koinos_Chain_argument_data: @unchecked Sendable {}
extension Koinos_Chain_resource_limit_data: @unchecked Sendable {}
extension Koinos_Chain_contract_metadata_object: @unchecked Sendable {}
extension Koinos_Chain_compute_bandwidth_entry: @unchecked Sendable {}
extension Koinos_Chain_compute_bandwidth_registry: @unchecked Sendable {}
extension Koinos_Chain_genesis_entry: @unchecked Sendable {}
extension Koinos_Chain_genesis_data: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "koinos.chain"

extension Koinos_Chain_privilege: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kernel_mode"),
    1: .same(proto: "user_mode"),
  ]
}

extension Koinos_Chain_dsa: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ecdsa_secp256k1"),
  ]
}

extension Koinos_Chain_error_data: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".error_data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_error_data, rhs: Koinos_Chain_error_data) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".result"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "object"),
    2: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .object(v)
        }
      }()
      case 2: try {
        var v: Koinos_Chain_error_data?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .error(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .object?: try {
      guard case .object(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_result, rhs: Koinos_Chain_result) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_object_space: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".object_space"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "system"),
    2: .same(proto: "zone"),
    3: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.system) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.zone) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.system != false {
      try visitor.visitSingularBoolField(value: self.system, fieldNumber: 1)
    }
    if !self.zone.isEmpty {
      try visitor.visitSingularBytesField(value: self.zone, fieldNumber: 2)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt32Field(value: self.id, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_object_space, rhs: Koinos_Chain_object_space) -> Bool {
    if lhs.system != rhs.system {return false}
    if lhs.zone != rhs.zone {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_database_key: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".database_key"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "space"),
    2: .same(proto: "key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._space) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.key) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._space {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_database_key, rhs: Koinos_Chain_database_key) -> Bool {
    if lhs._space != rhs._space {return false}
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_max_account_resources: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".max_account_resources"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularUInt64Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_max_account_resources, rhs: Koinos_Chain_max_account_resources) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_head_info: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".head_info"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "head_topology"),
    2: .standard(proto: "head_block_time"),
    3: .standard(proto: "last_irreversible_block"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._headTopology) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.headBlockTime) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.lastIrreversibleBlock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._headTopology {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.headBlockTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.headBlockTime, fieldNumber: 2)
    }
    if self.lastIrreversibleBlock != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastIrreversibleBlock, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_head_info, rhs: Koinos_Chain_head_info) -> Bool {
    if lhs._headTopology != rhs._headTopology {return false}
    if lhs.headBlockTime != rhs.headBlockTime {return false}
    if lhs.lastIrreversibleBlock != rhs.lastIrreversibleBlock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_caller_data: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".caller_data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "caller"),
    2: .standard(proto: "caller_privilege"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.caller) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.callerPrivilege) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.caller.isEmpty {
      try visitor.visitSingularBytesField(value: self.caller, fieldNumber: 1)
    }
    if self.callerPrivilege != .kernelMode {
      try visitor.visitSingularEnumField(value: self.callerPrivilege, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_caller_data, rhs: Koinos_Chain_caller_data) -> Bool {
    if lhs.caller != rhs.caller {return false}
    if lhs.callerPrivilege != rhs.callerPrivilege {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_argument_data: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".argument_data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entry_point"),
    2: .same(proto: "arguments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.entryPoint) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.arguments) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.entryPoint != 0 {
      try visitor.visitSingularUInt32Field(value: self.entryPoint, fieldNumber: 1)
    }
    if !self.arguments.isEmpty {
      try visitor.visitSingularBytesField(value: self.arguments, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_argument_data, rhs: Koinos_Chain_argument_data) -> Bool {
    if lhs.entryPoint != rhs.entryPoint {return false}
    if lhs.arguments != rhs.arguments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_resource_limit_data: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".resource_limit_data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "disk_storage_limit"),
    2: .standard(proto: "disk_storage_cost"),
    3: .standard(proto: "network_bandwidth_limit"),
    4: .standard(proto: "network_bandwidth_cost"),
    5: .standard(proto: "compute_bandwidth_limit"),
    6: .standard(proto: "compute_bandwidth_cost"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.diskStorageLimit) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.diskStorageCost) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.networkBandwidthLimit) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.networkBandwidthCost) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.computeBandwidthLimit) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.computeBandwidthCost) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.diskStorageLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.diskStorageLimit, fieldNumber: 1)
    }
    if self.diskStorageCost != 0 {
      try visitor.visitSingularUInt64Field(value: self.diskStorageCost, fieldNumber: 2)
    }
    if self.networkBandwidthLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.networkBandwidthLimit, fieldNumber: 3)
    }
    if self.networkBandwidthCost != 0 {
      try visitor.visitSingularUInt64Field(value: self.networkBandwidthCost, fieldNumber: 4)
    }
    if self.computeBandwidthLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.computeBandwidthLimit, fieldNumber: 5)
    }
    if self.computeBandwidthCost != 0 {
      try visitor.visitSingularUInt64Field(value: self.computeBandwidthCost, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_resource_limit_data, rhs: Koinos_Chain_resource_limit_data) -> Bool {
    if lhs.diskStorageLimit != rhs.diskStorageLimit {return false}
    if lhs.diskStorageCost != rhs.diskStorageCost {return false}
    if lhs.networkBandwidthLimit != rhs.networkBandwidthLimit {return false}
    if lhs.networkBandwidthCost != rhs.networkBandwidthCost {return false}
    if lhs.computeBandwidthLimit != rhs.computeBandwidthLimit {return false}
    if lhs.computeBandwidthCost != rhs.computeBandwidthCost {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_contract_metadata_object: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".contract_metadata_object"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "system"),
    3: .standard(proto: "authorizes_call_contract"),
    4: .standard(proto: "authorizes_transaction_application"),
    5: .standard(proto: "authorizes_upload_contract"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.hash) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.system) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.authorizesCallContract) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.authorizesTransactionApplication) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.authorizesUploadContract) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 1)
    }
    if self.system != false {
      try visitor.visitSingularBoolField(value: self.system, fieldNumber: 2)
    }
    if self.authorizesCallContract != false {
      try visitor.visitSingularBoolField(value: self.authorizesCallContract, fieldNumber: 3)
    }
    if self.authorizesTransactionApplication != false {
      try visitor.visitSingularBoolField(value: self.authorizesTransactionApplication, fieldNumber: 4)
    }
    if self.authorizesUploadContract != false {
      try visitor.visitSingularBoolField(value: self.authorizesUploadContract, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_contract_metadata_object, rhs: Koinos_Chain_contract_metadata_object) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.system != rhs.system {return false}
    if lhs.authorizesCallContract != rhs.authorizesCallContract {return false}
    if lhs.authorizesTransactionApplication != rhs.authorizesTransactionApplication {return false}
    if lhs.authorizesUploadContract != rhs.authorizesUploadContract {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_compute_bandwidth_entry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".compute_bandwidth_entry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "compute"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.compute) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.compute != 0 {
      try visitor.visitSingularUInt64Field(value: self.compute, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_compute_bandwidth_entry, rhs: Koinos_Chain_compute_bandwidth_entry) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.compute != rhs.compute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_compute_bandwidth_registry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".compute_bandwidth_registry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_compute_bandwidth_registry, rhs: Koinos_Chain_compute_bandwidth_registry) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_genesis_entry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".genesis_entry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "space"),
    2: .same(proto: "key"),
    3: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._space) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.key) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._space {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_genesis_entry, rhs: Koinos_Chain_genesis_entry) -> Bool {
    if lhs._space != rhs._space {return false}
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Chain_genesis_data: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".genesis_data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Chain_genesis_data, rhs: Koinos_Chain_genesis_data) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
