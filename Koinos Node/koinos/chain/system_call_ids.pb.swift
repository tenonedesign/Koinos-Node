// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: koinos/chain/system_call_ids.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Koinos_Chain_system_call_id: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case nop // = 0

  /// General Blockchain Management
  case getHeadInfo // = 1
  case applyBlock // = 2
  case applyTransaction // = 3
  case applyUploadContractOperation // = 4
  case applyCallContractOperation // = 5
  case applySetSystemCallOperation // = 6
  case applySetSystemContractOperation // = 7
  case preBlockCallback // = 8
  case postBlockCallback // = 9
  case preTransactionCallback // = 10
  case postTransactionCallback // = 11
  case getChainID // = 12

  /// System Helpers
  case processBlockSignature // = 101
  case getTransaction // = 102
  case getTransactionField // = 103
  case getBlock // = 104
  case getBlockField // = 105
  case getLastIrreversibleBlock // = 106
  case getAccountNonce // = 107
  case verifyAccountNonce // = 108
  case setAccountNonce // = 109
  case checkSystemAuthority // = 110
  case getOperation // = 111

  /// Resource Subsystem
  case getAccountRc // = 201
  case consumeAccountRc // = 202
  case getResourceLimits // = 203
  case consumeBlockResources // = 204

  /// Database
  case putObject // = 301
  case removeObject // = 302
  case getObject // = 303
  case getNextObject // = 304
  case getPrevObject // = 305

  /// Logging
  case log // = 401
  case event // = 402

  /// Cryptography
  case hash // = 501
  case recoverPublicKey // = 502
  case verifyMerkleRoot // = 503
  case verifySignature // = 504
  case verifyVrfProof // = 505

  /// Contract Management
  case call // = 601
  case exit // = 602
  case getArguments // = 603
  case getContractID // = 604
  case getCaller // = 605
  case checkAuthority // = 606

  /// System Management
  case getContractName // = 10000
  case getContractAddress // = 10001
  case UNRECOGNIZED(Int)

  init() {
    self = .nop
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .nop
    case 1: self = .getHeadInfo
    case 2: self = .applyBlock
    case 3: self = .applyTransaction
    case 4: self = .applyUploadContractOperation
    case 5: self = .applyCallContractOperation
    case 6: self = .applySetSystemCallOperation
    case 7: self = .applySetSystemContractOperation
    case 8: self = .preBlockCallback
    case 9: self = .postBlockCallback
    case 10: self = .preTransactionCallback
    case 11: self = .postTransactionCallback
    case 12: self = .getChainID
    case 101: self = .processBlockSignature
    case 102: self = .getTransaction
    case 103: self = .getTransactionField
    case 104: self = .getBlock
    case 105: self = .getBlockField
    case 106: self = .getLastIrreversibleBlock
    case 107: self = .getAccountNonce
    case 108: self = .verifyAccountNonce
    case 109: self = .setAccountNonce
    case 110: self = .checkSystemAuthority
    case 111: self = .getOperation
    case 201: self = .getAccountRc
    case 202: self = .consumeAccountRc
    case 203: self = .getResourceLimits
    case 204: self = .consumeBlockResources
    case 301: self = .putObject
    case 302: self = .removeObject
    case 303: self = .getObject
    case 304: self = .getNextObject
    case 305: self = .getPrevObject
    case 401: self = .log
    case 402: self = .event
    case 501: self = .hash
    case 502: self = .recoverPublicKey
    case 503: self = .verifyMerkleRoot
    case 504: self = .verifySignature
    case 505: self = .verifyVrfProof
    case 601: self = .call
    case 602: self = .exit
    case 603: self = .getArguments
    case 604: self = .getContractID
    case 605: self = .getCaller
    case 606: self = .checkAuthority
    case 10000: self = .getContractName
    case 10001: self = .getContractAddress
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .nop: return 0
    case .getHeadInfo: return 1
    case .applyBlock: return 2
    case .applyTransaction: return 3
    case .applyUploadContractOperation: return 4
    case .applyCallContractOperation: return 5
    case .applySetSystemCallOperation: return 6
    case .applySetSystemContractOperation: return 7
    case .preBlockCallback: return 8
    case .postBlockCallback: return 9
    case .preTransactionCallback: return 10
    case .postTransactionCallback: return 11
    case .getChainID: return 12
    case .processBlockSignature: return 101
    case .getTransaction: return 102
    case .getTransactionField: return 103
    case .getBlock: return 104
    case .getBlockField: return 105
    case .getLastIrreversibleBlock: return 106
    case .getAccountNonce: return 107
    case .verifyAccountNonce: return 108
    case .setAccountNonce: return 109
    case .checkSystemAuthority: return 110
    case .getOperation: return 111
    case .getAccountRc: return 201
    case .consumeAccountRc: return 202
    case .getResourceLimits: return 203
    case .consumeBlockResources: return 204
    case .putObject: return 301
    case .removeObject: return 302
    case .getObject: return 303
    case .getNextObject: return 304
    case .getPrevObject: return 305
    case .log: return 401
    case .event: return 402
    case .hash: return 501
    case .recoverPublicKey: return 502
    case .verifyMerkleRoot: return 503
    case .verifySignature: return 504
    case .verifyVrfProof: return 505
    case .call: return 601
    case .exit: return 602
    case .getArguments: return 603
    case .getContractID: return 604
    case .getCaller: return 605
    case .checkAuthority: return 606
    case .getContractName: return 10000
    case .getContractAddress: return 10001
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Koinos_Chain_system_call_id: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Koinos_Chain_system_call_id] = [
    .nop,
    .getHeadInfo,
    .applyBlock,
    .applyTransaction,
    .applyUploadContractOperation,
    .applyCallContractOperation,
    .applySetSystemCallOperation,
    .applySetSystemContractOperation,
    .preBlockCallback,
    .postBlockCallback,
    .preTransactionCallback,
    .postTransactionCallback,
    .getChainID,
    .processBlockSignature,
    .getTransaction,
    .getTransactionField,
    .getBlock,
    .getBlockField,
    .getLastIrreversibleBlock,
    .getAccountNonce,
    .verifyAccountNonce,
    .setAccountNonce,
    .checkSystemAuthority,
    .getOperation,
    .getAccountRc,
    .consumeAccountRc,
    .getResourceLimits,
    .consumeBlockResources,
    .putObject,
    .removeObject,
    .getObject,
    .getNextObject,
    .getPrevObject,
    .log,
    .event,
    .hash,
    .recoverPublicKey,
    .verifyMerkleRoot,
    .verifySignature,
    .verifyVrfProof,
    .call,
    .exit,
    .getArguments,
    .getContractID,
    .getCaller,
    .checkAuthority,
    .getContractName,
    .getContractAddress,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Koinos_Chain_system_call_id: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Koinos_Chain_system_call_id: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "nop"),
    1: .same(proto: "get_head_info"),
    2: .same(proto: "apply_block"),
    3: .same(proto: "apply_transaction"),
    4: .same(proto: "apply_upload_contract_operation"),
    5: .same(proto: "apply_call_contract_operation"),
    6: .same(proto: "apply_set_system_call_operation"),
    7: .same(proto: "apply_set_system_contract_operation"),
    8: .same(proto: "pre_block_callback"),
    9: .same(proto: "post_block_callback"),
    10: .same(proto: "pre_transaction_callback"),
    11: .same(proto: "post_transaction_callback"),
    12: .same(proto: "get_chain_id"),
    101: .same(proto: "process_block_signature"),
    102: .same(proto: "get_transaction"),
    103: .same(proto: "get_transaction_field"),
    104: .same(proto: "get_block"),
    105: .same(proto: "get_block_field"),
    106: .same(proto: "get_last_irreversible_block"),
    107: .same(proto: "get_account_nonce"),
    108: .same(proto: "verify_account_nonce"),
    109: .same(proto: "set_account_nonce"),
    110: .same(proto: "check_system_authority"),
    111: .same(proto: "get_operation"),
    201: .same(proto: "get_account_rc"),
    202: .same(proto: "consume_account_rc"),
    203: .same(proto: "get_resource_limits"),
    204: .same(proto: "consume_block_resources"),
    301: .same(proto: "put_object"),
    302: .same(proto: "remove_object"),
    303: .same(proto: "get_object"),
    304: .same(proto: "get_next_object"),
    305: .same(proto: "get_prev_object"),
    401: .same(proto: "log"),
    402: .same(proto: "event"),
    501: .same(proto: "hash"),
    502: .same(proto: "recover_public_key"),
    503: .same(proto: "verify_merkle_root"),
    504: .same(proto: "verify_signature"),
    505: .same(proto: "verify_vrf_proof"),
    601: .same(proto: "call"),
    602: .same(proto: "exit"),
    603: .same(proto: "get_arguments"),
    604: .same(proto: "get_contract_id"),
    605: .same(proto: "get_caller"),
    606: .same(proto: "check_authority"),
    10000: .same(proto: "get_contract_name"),
    10001: .same(proto: "get_contract_address"),
  ]
}
