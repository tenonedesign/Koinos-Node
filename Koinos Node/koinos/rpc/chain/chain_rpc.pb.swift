// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: koinos/rpc/chain/chain_rpc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Koinos_Rpc_Chain_submit_block_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var block: Koinos_Protocol_block {
    get {return _block ?? Koinos_Protocol_block()}
    set {_block = newValue}
  }
  /// Returns true if `block` has been explicitly set.
  var hasBlock: Bool {return self._block != nil}
  /// Clears the value of `block`. Subsequent reads from it will return its default value.
  mutating func clearBlock() {self._block = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _block: Koinos_Protocol_block? = nil
}

struct Koinos_Rpc_Chain_submit_block_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var receipt: Koinos_Protocol_block_receipt {
    get {return _receipt ?? Koinos_Protocol_block_receipt()}
    set {_receipt = newValue}
  }
  /// Returns true if `receipt` has been explicitly set.
  var hasReceipt: Bool {return self._receipt != nil}
  /// Clears the value of `receipt`. Subsequent reads from it will return its default value.
  mutating func clearReceipt() {self._receipt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _receipt: Koinos_Protocol_block_receipt? = nil
}

struct Koinos_Rpc_Chain_submit_transaction_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transaction: Koinos_Protocol_transaction {
    get {return _transaction ?? Koinos_Protocol_transaction()}
    set {_transaction = newValue}
  }
  /// Returns true if `transaction` has been explicitly set.
  var hasTransaction: Bool {return self._transaction != nil}
  /// Clears the value of `transaction`. Subsequent reads from it will return its default value.
  mutating func clearTransaction() {self._transaction = nil}

  var broadcast: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _transaction: Koinos_Protocol_transaction? = nil
}

struct Koinos_Rpc_Chain_submit_transaction_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var receipt: Koinos_Protocol_transaction_receipt {
    get {return _receipt ?? Koinos_Protocol_transaction_receipt()}
    set {_receipt = newValue}
  }
  /// Returns true if `receipt` has been explicitly set.
  var hasReceipt: Bool {return self._receipt != nil}
  /// Clears the value of `receipt`. Subsequent reads from it will return its default value.
  mutating func clearReceipt() {self._receipt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _receipt: Koinos_Protocol_transaction_receipt? = nil
}

struct Koinos_Rpc_Chain_get_head_info_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_Chain_get_head_info_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var headTopology: Koinos_block_topology {
    get {return _headTopology ?? Koinos_block_topology()}
    set {_headTopology = newValue}
  }
  /// Returns true if `headTopology` has been explicitly set.
  var hasHeadTopology: Bool {return self._headTopology != nil}
  /// Clears the value of `headTopology`. Subsequent reads from it will return its default value.
  mutating func clearHeadTopology() {self._headTopology = nil}

  var lastIrreversibleBlock: UInt64 = 0

  var headStateMerkleRoot: Data = Data()

  var headBlockTime: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _headTopology: Koinos_block_topology? = nil
}

struct Koinos_Rpc_Chain_get_chain_id_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_Chain_get_chain_id_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_Chain_get_fork_heads_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_Chain_get_fork_heads_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lastIrreversibleBlock: Koinos_block_topology {
    get {return _lastIrreversibleBlock ?? Koinos_block_topology()}
    set {_lastIrreversibleBlock = newValue}
  }
  /// Returns true if `lastIrreversibleBlock` has been explicitly set.
  var hasLastIrreversibleBlock: Bool {return self._lastIrreversibleBlock != nil}
  /// Clears the value of `lastIrreversibleBlock`. Subsequent reads from it will return its default value.
  mutating func clearLastIrreversibleBlock() {self._lastIrreversibleBlock = nil}

  var forkHeads: [Koinos_block_topology] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lastIrreversibleBlock: Koinos_block_topology? = nil
}

struct Koinos_Rpc_Chain_read_contract_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contractID: Data = Data()

  var entryPoint: UInt32 = 0

  var args: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_Chain_read_contract_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Data = Data()

  var logs: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_Chain_get_account_nonce_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var account: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_Chain_get_account_nonce_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nonce: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_Chain_get_account_rc_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var account: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_Chain_get_account_rc_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rc: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_Chain_get_resource_limits_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_Chain_get_resource_limits_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resourceLimitData: Koinos_Chain_resource_limit_data {
    get {return _resourceLimitData ?? Koinos_Chain_resource_limit_data()}
    set {_resourceLimitData = newValue}
  }
  /// Returns true if `resourceLimitData` has been explicitly set.
  var hasResourceLimitData: Bool {return self._resourceLimitData != nil}
  /// Clears the value of `resourceLimitData`. Subsequent reads from it will return its default value.
  mutating func clearResourceLimitData() {self._resourceLimitData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _resourceLimitData: Koinos_Chain_resource_limit_data? = nil
}

struct Koinos_Rpc_Chain_chain_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: Koinos_Rpc_Chain_chain_request.OneOf_Request? = nil

  var reserved: Koinos_Rpc_reserved_rpc {
    get {
      if case .reserved(let v)? = request {return v}
      return Koinos_Rpc_reserved_rpc()
    }
    set {request = .reserved(newValue)}
  }

  var submitBlock: Koinos_Rpc_Chain_submit_block_request {
    get {
      if case .submitBlock(let v)? = request {return v}
      return Koinos_Rpc_Chain_submit_block_request()
    }
    set {request = .submitBlock(newValue)}
  }

  var submitTransaction: Koinos_Rpc_Chain_submit_transaction_request {
    get {
      if case .submitTransaction(let v)? = request {return v}
      return Koinos_Rpc_Chain_submit_transaction_request()
    }
    set {request = .submitTransaction(newValue)}
  }

  var getHeadInfo: Koinos_Rpc_Chain_get_head_info_request {
    get {
      if case .getHeadInfo(let v)? = request {return v}
      return Koinos_Rpc_Chain_get_head_info_request()
    }
    set {request = .getHeadInfo(newValue)}
  }

  var getChainID: Koinos_Rpc_Chain_get_chain_id_request {
    get {
      if case .getChainID(let v)? = request {return v}
      return Koinos_Rpc_Chain_get_chain_id_request()
    }
    set {request = .getChainID(newValue)}
  }

  var getForkHeads: Koinos_Rpc_Chain_get_fork_heads_request {
    get {
      if case .getForkHeads(let v)? = request {return v}
      return Koinos_Rpc_Chain_get_fork_heads_request()
    }
    set {request = .getForkHeads(newValue)}
  }

  var readContract: Koinos_Rpc_Chain_read_contract_request {
    get {
      if case .readContract(let v)? = request {return v}
      return Koinos_Rpc_Chain_read_contract_request()
    }
    set {request = .readContract(newValue)}
  }

  var getAccountNonce: Koinos_Rpc_Chain_get_account_nonce_request {
    get {
      if case .getAccountNonce(let v)? = request {return v}
      return Koinos_Rpc_Chain_get_account_nonce_request()
    }
    set {request = .getAccountNonce(newValue)}
  }

  var getAccountRc: Koinos_Rpc_Chain_get_account_rc_request {
    get {
      if case .getAccountRc(let v)? = request {return v}
      return Koinos_Rpc_Chain_get_account_rc_request()
    }
    set {request = .getAccountRc(newValue)}
  }

  var getResourceLimits: Koinos_Rpc_Chain_get_resource_limits_request {
    get {
      if case .getResourceLimits(let v)? = request {return v}
      return Koinos_Rpc_Chain_get_resource_limits_request()
    }
    set {request = .getResourceLimits(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable {
    case reserved(Koinos_Rpc_reserved_rpc)
    case submitBlock(Koinos_Rpc_Chain_submit_block_request)
    case submitTransaction(Koinos_Rpc_Chain_submit_transaction_request)
    case getHeadInfo(Koinos_Rpc_Chain_get_head_info_request)
    case getChainID(Koinos_Rpc_Chain_get_chain_id_request)
    case getForkHeads(Koinos_Rpc_Chain_get_fork_heads_request)
    case readContract(Koinos_Rpc_Chain_read_contract_request)
    case getAccountNonce(Koinos_Rpc_Chain_get_account_nonce_request)
    case getAccountRc(Koinos_Rpc_Chain_get_account_rc_request)
    case getResourceLimits(Koinos_Rpc_Chain_get_resource_limits_request)

  #if !swift(>=4.1)
    static func ==(lhs: Koinos_Rpc_Chain_chain_request.OneOf_Request, rhs: Koinos_Rpc_Chain_chain_request.OneOf_Request) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.reserved, .reserved): return {
        guard case .reserved(let l) = lhs, case .reserved(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.submitBlock, .submitBlock): return {
        guard case .submitBlock(let l) = lhs, case .submitBlock(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.submitTransaction, .submitTransaction): return {
        guard case .submitTransaction(let l) = lhs, case .submitTransaction(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getHeadInfo, .getHeadInfo): return {
        guard case .getHeadInfo(let l) = lhs, case .getHeadInfo(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getChainID, .getChainID): return {
        guard case .getChainID(let l) = lhs, case .getChainID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getForkHeads, .getForkHeads): return {
        guard case .getForkHeads(let l) = lhs, case .getForkHeads(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.readContract, .readContract): return {
        guard case .readContract(let l) = lhs, case .readContract(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getAccountNonce, .getAccountNonce): return {
        guard case .getAccountNonce(let l) = lhs, case .getAccountNonce(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getAccountRc, .getAccountRc): return {
        guard case .getAccountRc(let l) = lhs, case .getAccountRc(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getResourceLimits, .getResourceLimits): return {
        guard case .getResourceLimits(let l) = lhs, case .getResourceLimits(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Koinos_Rpc_Chain_chain_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: Koinos_Rpc_Chain_chain_response.OneOf_Response? = nil

  var reserved: Koinos_Rpc_reserved_rpc {
    get {
      if case .reserved(let v)? = response {return v}
      return Koinos_Rpc_reserved_rpc()
    }
    set {response = .reserved(newValue)}
  }

  var error: Koinos_Rpc_error_response {
    get {
      if case .error(let v)? = response {return v}
      return Koinos_Rpc_error_response()
    }
    set {response = .error(newValue)}
  }

  var submitBlock: Koinos_Rpc_Chain_submit_block_response {
    get {
      if case .submitBlock(let v)? = response {return v}
      return Koinos_Rpc_Chain_submit_block_response()
    }
    set {response = .submitBlock(newValue)}
  }

  var submitTransaction: Koinos_Rpc_Chain_submit_transaction_response {
    get {
      if case .submitTransaction(let v)? = response {return v}
      return Koinos_Rpc_Chain_submit_transaction_response()
    }
    set {response = .submitTransaction(newValue)}
  }

  var getHeadInfo: Koinos_Rpc_Chain_get_head_info_response {
    get {
      if case .getHeadInfo(let v)? = response {return v}
      return Koinos_Rpc_Chain_get_head_info_response()
    }
    set {response = .getHeadInfo(newValue)}
  }

  var getChainID: Koinos_Rpc_Chain_get_chain_id_response {
    get {
      if case .getChainID(let v)? = response {return v}
      return Koinos_Rpc_Chain_get_chain_id_response()
    }
    set {response = .getChainID(newValue)}
  }

  var getForkHeads: Koinos_Rpc_Chain_get_fork_heads_response {
    get {
      if case .getForkHeads(let v)? = response {return v}
      return Koinos_Rpc_Chain_get_fork_heads_response()
    }
    set {response = .getForkHeads(newValue)}
  }

  var readContract: Koinos_Rpc_Chain_read_contract_response {
    get {
      if case .readContract(let v)? = response {return v}
      return Koinos_Rpc_Chain_read_contract_response()
    }
    set {response = .readContract(newValue)}
  }

  var getAccountNonce: Koinos_Rpc_Chain_get_account_nonce_response {
    get {
      if case .getAccountNonce(let v)? = response {return v}
      return Koinos_Rpc_Chain_get_account_nonce_response()
    }
    set {response = .getAccountNonce(newValue)}
  }

  var getAccountRc: Koinos_Rpc_Chain_get_account_rc_response {
    get {
      if case .getAccountRc(let v)? = response {return v}
      return Koinos_Rpc_Chain_get_account_rc_response()
    }
    set {response = .getAccountRc(newValue)}
  }

  var getResourceLimits: Koinos_Rpc_Chain_get_resource_limits_response {
    get {
      if case .getResourceLimits(let v)? = response {return v}
      return Koinos_Rpc_Chain_get_resource_limits_response()
    }
    set {response = .getResourceLimits(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Response: Equatable {
    case reserved(Koinos_Rpc_reserved_rpc)
    case error(Koinos_Rpc_error_response)
    case submitBlock(Koinos_Rpc_Chain_submit_block_response)
    case submitTransaction(Koinos_Rpc_Chain_submit_transaction_response)
    case getHeadInfo(Koinos_Rpc_Chain_get_head_info_response)
    case getChainID(Koinos_Rpc_Chain_get_chain_id_response)
    case getForkHeads(Koinos_Rpc_Chain_get_fork_heads_response)
    case readContract(Koinos_Rpc_Chain_read_contract_response)
    case getAccountNonce(Koinos_Rpc_Chain_get_account_nonce_response)
    case getAccountRc(Koinos_Rpc_Chain_get_account_rc_response)
    case getResourceLimits(Koinos_Rpc_Chain_get_resource_limits_response)

  #if !swift(>=4.1)
    static func ==(lhs: Koinos_Rpc_Chain_chain_response.OneOf_Response, rhs: Koinos_Rpc_Chain_chain_response.OneOf_Response) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.reserved, .reserved): return {
        guard case .reserved(let l) = lhs, case .reserved(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.submitBlock, .submitBlock): return {
        guard case .submitBlock(let l) = lhs, case .submitBlock(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.submitTransaction, .submitTransaction): return {
        guard case .submitTransaction(let l) = lhs, case .submitTransaction(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getHeadInfo, .getHeadInfo): return {
        guard case .getHeadInfo(let l) = lhs, case .getHeadInfo(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getChainID, .getChainID): return {
        guard case .getChainID(let l) = lhs, case .getChainID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getForkHeads, .getForkHeads): return {
        guard case .getForkHeads(let l) = lhs, case .getForkHeads(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.readContract, .readContract): return {
        guard case .readContract(let l) = lhs, case .readContract(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getAccountNonce, .getAccountNonce): return {
        guard case .getAccountNonce(let l) = lhs, case .getAccountNonce(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getAccountRc, .getAccountRc): return {
        guard case .getAccountRc(let l) = lhs, case .getAccountRc(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getResourceLimits, .getResourceLimits): return {
        guard case .getResourceLimits(let l) = lhs, case .getResourceLimits(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Koinos_Rpc_Chain_submit_block_request: @unchecked Sendable {}
extension Koinos_Rpc_Chain_submit_block_response: @unchecked Sendable {}
extension Koinos_Rpc_Chain_submit_transaction_request: @unchecked Sendable {}
extension Koinos_Rpc_Chain_submit_transaction_response: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_head_info_request: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_head_info_response: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_chain_id_request: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_chain_id_response: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_fork_heads_request: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_fork_heads_response: @unchecked Sendable {}
extension Koinos_Rpc_Chain_read_contract_request: @unchecked Sendable {}
extension Koinos_Rpc_Chain_read_contract_response: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_account_nonce_request: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_account_nonce_response: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_account_rc_request: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_account_rc_response: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_resource_limits_request: @unchecked Sendable {}
extension Koinos_Rpc_Chain_get_resource_limits_response: @unchecked Sendable {}
extension Koinos_Rpc_Chain_chain_request: @unchecked Sendable {}
extension Koinos_Rpc_Chain_chain_request.OneOf_Request: @unchecked Sendable {}
extension Koinos_Rpc_Chain_chain_response: @unchecked Sendable {}
extension Koinos_Rpc_Chain_chain_response.OneOf_Response: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "koinos.rpc.chain"

extension Koinos_Rpc_Chain_submit_block_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".submit_block_request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "block"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._block) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._block {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_submit_block_request, rhs: Koinos_Rpc_Chain_submit_block_request) -> Bool {
    if lhs._block != rhs._block {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_submit_block_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".submit_block_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "receipt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._receipt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._receipt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_submit_block_response, rhs: Koinos_Rpc_Chain_submit_block_response) -> Bool {
    if lhs._receipt != rhs._receipt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_submit_transaction_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".submit_transaction_request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .same(proto: "broadcast"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._transaction) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.broadcast) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._transaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.broadcast != false {
      try visitor.visitSingularBoolField(value: self.broadcast, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_submit_transaction_request, rhs: Koinos_Rpc_Chain_submit_transaction_request) -> Bool {
    if lhs._transaction != rhs._transaction {return false}
    if lhs.broadcast != rhs.broadcast {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_submit_transaction_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".submit_transaction_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "receipt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._receipt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._receipt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_submit_transaction_response, rhs: Koinos_Rpc_Chain_submit_transaction_response) -> Bool {
    if lhs._receipt != rhs._receipt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_head_info_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_head_info_request"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_head_info_request, rhs: Koinos_Rpc_Chain_get_head_info_request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_head_info_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_head_info_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "head_topology"),
    2: .standard(proto: "last_irreversible_block"),
    3: .standard(proto: "head_state_merkle_root"),
    4: .standard(proto: "head_block_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._headTopology) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lastIrreversibleBlock) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.headStateMerkleRoot) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.headBlockTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._headTopology {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.lastIrreversibleBlock != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastIrreversibleBlock, fieldNumber: 2)
    }
    if !self.headStateMerkleRoot.isEmpty {
      try visitor.visitSingularBytesField(value: self.headStateMerkleRoot, fieldNumber: 3)
    }
    if self.headBlockTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.headBlockTime, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_head_info_response, rhs: Koinos_Rpc_Chain_get_head_info_response) -> Bool {
    if lhs._headTopology != rhs._headTopology {return false}
    if lhs.lastIrreversibleBlock != rhs.lastIrreversibleBlock {return false}
    if lhs.headStateMerkleRoot != rhs.headStateMerkleRoot {return false}
    if lhs.headBlockTime != rhs.headBlockTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_chain_id_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_chain_id_request"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_chain_id_request, rhs: Koinos_Rpc_Chain_get_chain_id_request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_chain_id_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_chain_id_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.chainID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainID.isEmpty {
      try visitor.visitSingularBytesField(value: self.chainID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_chain_id_response, rhs: Koinos_Rpc_Chain_get_chain_id_response) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_fork_heads_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_fork_heads_request"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_fork_heads_request, rhs: Koinos_Rpc_Chain_get_fork_heads_request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_fork_heads_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_fork_heads_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_irreversible_block"),
    2: .standard(proto: "fork_heads"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._lastIrreversibleBlock) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.forkHeads) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._lastIrreversibleBlock {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.forkHeads.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.forkHeads, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_fork_heads_response, rhs: Koinos_Rpc_Chain_get_fork_heads_response) -> Bool {
    if lhs._lastIrreversibleBlock != rhs._lastIrreversibleBlock {return false}
    if lhs.forkHeads != rhs.forkHeads {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_read_contract_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".read_contract_request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_id"),
    2: .standard(proto: "entry_point"),
    3: .same(proto: "args"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.contractID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.entryPoint) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.args) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contractID.isEmpty {
      try visitor.visitSingularBytesField(value: self.contractID, fieldNumber: 1)
    }
    if self.entryPoint != 0 {
      try visitor.visitSingularUInt32Field(value: self.entryPoint, fieldNumber: 2)
    }
    if !self.args.isEmpty {
      try visitor.visitSingularBytesField(value: self.args, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_read_contract_request, rhs: Koinos_Rpc_Chain_read_contract_request) -> Bool {
    if lhs.contractID != rhs.contractID {return false}
    if lhs.entryPoint != rhs.entryPoint {return false}
    if lhs.args != rhs.args {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_read_contract_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".read_contract_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "logs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.result) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.logs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.result.isEmpty {
      try visitor.visitSingularBytesField(value: self.result, fieldNumber: 1)
    }
    if !self.logs.isEmpty {
      try visitor.visitRepeatedStringField(value: self.logs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_read_contract_response, rhs: Koinos_Rpc_Chain_read_contract_response) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.logs != rhs.logs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_account_nonce_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_account_nonce_request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.account) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.account.isEmpty {
      try visitor.visitSingularBytesField(value: self.account, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_account_nonce_request, rhs: Koinos_Rpc_Chain_get_account_nonce_request) -> Bool {
    if lhs.account != rhs.account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_account_nonce_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_account_nonce_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nonce"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.nonce) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_account_nonce_response, rhs: Koinos_Rpc_Chain_get_account_nonce_response) -> Bool {
    if lhs.nonce != rhs.nonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_account_rc_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_account_rc_request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.account) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.account.isEmpty {
      try visitor.visitSingularBytesField(value: self.account, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_account_rc_request, rhs: Koinos_Rpc_Chain_get_account_rc_request) -> Bool {
    if lhs.account != rhs.account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_account_rc_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_account_rc_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rc"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.rc) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rc != 0 {
      try visitor.visitSingularUInt64Field(value: self.rc, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_account_rc_response, rhs: Koinos_Rpc_Chain_get_account_rc_response) -> Bool {
    if lhs.rc != rhs.rc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_resource_limits_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_resource_limits_request"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_resource_limits_request, rhs: Koinos_Rpc_Chain_get_resource_limits_request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_get_resource_limits_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_resource_limits_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "resource_limit_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._resourceLimitData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._resourceLimitData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_get_resource_limits_response, rhs: Koinos_Rpc_Chain_get_resource_limits_response) -> Bool {
    if lhs._resourceLimitData != rhs._resourceLimitData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_chain_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".chain_request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reserved"),
    2: .standard(proto: "submit_block"),
    3: .standard(proto: "submit_transaction"),
    4: .standard(proto: "get_head_info"),
    5: .standard(proto: "get_chain_id"),
    6: .standard(proto: "get_fork_heads"),
    7: .standard(proto: "read_contract"),
    8: .standard(proto: "get_account_nonce"),
    9: .standard(proto: "get_account_rc"),
    10: .standard(proto: "get_resource_limits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Koinos_Rpc_reserved_rpc?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .reserved(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .reserved(v)
        }
      }()
      case 2: try {
        var v: Koinos_Rpc_Chain_submit_block_request?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .submitBlock(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .submitBlock(v)
        }
      }()
      case 3: try {
        var v: Koinos_Rpc_Chain_submit_transaction_request?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .submitTransaction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .submitTransaction(v)
        }
      }()
      case 4: try {
        var v: Koinos_Rpc_Chain_get_head_info_request?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getHeadInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getHeadInfo(v)
        }
      }()
      case 5: try {
        var v: Koinos_Rpc_Chain_get_chain_id_request?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getChainID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getChainID(v)
        }
      }()
      case 6: try {
        var v: Koinos_Rpc_Chain_get_fork_heads_request?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getForkHeads(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getForkHeads(v)
        }
      }()
      case 7: try {
        var v: Koinos_Rpc_Chain_read_contract_request?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .readContract(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .readContract(v)
        }
      }()
      case 8: try {
        var v: Koinos_Rpc_Chain_get_account_nonce_request?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getAccountNonce(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getAccountNonce(v)
        }
      }()
      case 9: try {
        var v: Koinos_Rpc_Chain_get_account_rc_request?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getAccountRc(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getAccountRc(v)
        }
      }()
      case 10: try {
        var v: Koinos_Rpc_Chain_get_resource_limits_request?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getResourceLimits(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getResourceLimits(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .reserved?: try {
      guard case .reserved(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .submitBlock?: try {
      guard case .submitBlock(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .submitTransaction?: try {
      guard case .submitTransaction(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .getHeadInfo?: try {
      guard case .getHeadInfo(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .getChainID?: try {
      guard case .getChainID(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .getForkHeads?: try {
      guard case .getForkHeads(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .readContract?: try {
      guard case .readContract(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .getAccountNonce?: try {
      guard case .getAccountNonce(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .getAccountRc?: try {
      guard case .getAccountRc(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .getResourceLimits?: try {
      guard case .getResourceLimits(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_chain_request, rhs: Koinos_Rpc_Chain_chain_request) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_Chain_chain_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".chain_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reserved"),
    2: .same(proto: "error"),
    3: .standard(proto: "submit_block"),
    4: .standard(proto: "submit_transaction"),
    5: .standard(proto: "get_head_info"),
    6: .standard(proto: "get_chain_id"),
    7: .standard(proto: "get_fork_heads"),
    8: .standard(proto: "read_contract"),
    9: .standard(proto: "get_account_nonce"),
    10: .standard(proto: "get_account_rc"),
    11: .standard(proto: "get_resource_limits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Koinos_Rpc_reserved_rpc?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .reserved(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .reserved(v)
        }
      }()
      case 2: try {
        var v: Koinos_Rpc_error_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .error(v)
        }
      }()
      case 3: try {
        var v: Koinos_Rpc_Chain_submit_block_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .submitBlock(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .submitBlock(v)
        }
      }()
      case 4: try {
        var v: Koinos_Rpc_Chain_submit_transaction_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .submitTransaction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .submitTransaction(v)
        }
      }()
      case 5: try {
        var v: Koinos_Rpc_Chain_get_head_info_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getHeadInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getHeadInfo(v)
        }
      }()
      case 6: try {
        var v: Koinos_Rpc_Chain_get_chain_id_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getChainID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getChainID(v)
        }
      }()
      case 7: try {
        var v: Koinos_Rpc_Chain_get_fork_heads_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getForkHeads(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getForkHeads(v)
        }
      }()
      case 8: try {
        var v: Koinos_Rpc_Chain_read_contract_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .readContract(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .readContract(v)
        }
      }()
      case 9: try {
        var v: Koinos_Rpc_Chain_get_account_nonce_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getAccountNonce(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getAccountNonce(v)
        }
      }()
      case 10: try {
        var v: Koinos_Rpc_Chain_get_account_rc_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getAccountRc(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getAccountRc(v)
        }
      }()
      case 11: try {
        var v: Koinos_Rpc_Chain_get_resource_limits_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getResourceLimits(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getResourceLimits(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .reserved?: try {
      guard case .reserved(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .submitBlock?: try {
      guard case .submitBlock(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .submitTransaction?: try {
      guard case .submitTransaction(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .getHeadInfo?: try {
      guard case .getHeadInfo(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .getChainID?: try {
      guard case .getChainID(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .getForkHeads?: try {
      guard case .getForkHeads(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .readContract?: try {
      guard case .readContract(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .getAccountNonce?: try {
      guard case .getAccountNonce(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .getAccountRc?: try {
      guard case .getAccountRc(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .getResourceLimits?: try {
      guard case .getResourceLimits(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_Chain_chain_response, rhs: Koinos_Rpc_Chain_chain_response) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
