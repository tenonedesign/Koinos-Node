// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: koinos/rpc/transaction_store/transaction_store_rpc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Koinos_Rpc_TransactionStore_get_transactions_by_id_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transactionIds: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_TransactionStore_get_transactions_by_id_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transactions: [Koinos_TransactionStore_transaction_item] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Rpc_TransactionStore_transaction_store_request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: Koinos_Rpc_TransactionStore_transaction_store_request.OneOf_Request? = nil

  var reserved: Koinos_Rpc_reserved_rpc {
    get {
      if case .reserved(let v)? = request {return v}
      return Koinos_Rpc_reserved_rpc()
    }
    set {request = .reserved(newValue)}
  }

  var getTransactionsByID: Koinos_Rpc_TransactionStore_get_transactions_by_id_request {
    get {
      if case .getTransactionsByID(let v)? = request {return v}
      return Koinos_Rpc_TransactionStore_get_transactions_by_id_request()
    }
    set {request = .getTransactionsByID(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable {
    case reserved(Koinos_Rpc_reserved_rpc)
    case getTransactionsByID(Koinos_Rpc_TransactionStore_get_transactions_by_id_request)

  #if !swift(>=4.1)
    static func ==(lhs: Koinos_Rpc_TransactionStore_transaction_store_request.OneOf_Request, rhs: Koinos_Rpc_TransactionStore_transaction_store_request.OneOf_Request) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.reserved, .reserved): return {
        guard case .reserved(let l) = lhs, case .reserved(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getTransactionsByID, .getTransactionsByID): return {
        guard case .getTransactionsByID(let l) = lhs, case .getTransactionsByID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Koinos_Rpc_TransactionStore_transaction_store_response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: Koinos_Rpc_TransactionStore_transaction_store_response.OneOf_Response? = nil

  var reserved: Koinos_Rpc_reserved_rpc {
    get {
      if case .reserved(let v)? = response {return v}
      return Koinos_Rpc_reserved_rpc()
    }
    set {response = .reserved(newValue)}
  }

  var error: Koinos_Rpc_error_response {
    get {
      if case .error(let v)? = response {return v}
      return Koinos_Rpc_error_response()
    }
    set {response = .error(newValue)}
  }

  var getTransactionsByID: Koinos_Rpc_TransactionStore_get_transactions_by_id_response {
    get {
      if case .getTransactionsByID(let v)? = response {return v}
      return Koinos_Rpc_TransactionStore_get_transactions_by_id_response()
    }
    set {response = .getTransactionsByID(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Response: Equatable {
    case reserved(Koinos_Rpc_reserved_rpc)
    case error(Koinos_Rpc_error_response)
    case getTransactionsByID(Koinos_Rpc_TransactionStore_get_transactions_by_id_response)

  #if !swift(>=4.1)
    static func ==(lhs: Koinos_Rpc_TransactionStore_transaction_store_response.OneOf_Response, rhs: Koinos_Rpc_TransactionStore_transaction_store_response.OneOf_Response) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.reserved, .reserved): return {
        guard case .reserved(let l) = lhs, case .reserved(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getTransactionsByID, .getTransactionsByID): return {
        guard case .getTransactionsByID(let l) = lhs, case .getTransactionsByID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Koinos_Rpc_TransactionStore_get_transactions_by_id_request: @unchecked Sendable {}
extension Koinos_Rpc_TransactionStore_get_transactions_by_id_response: @unchecked Sendable {}
extension Koinos_Rpc_TransactionStore_transaction_store_request: @unchecked Sendable {}
extension Koinos_Rpc_TransactionStore_transaction_store_request.OneOf_Request: @unchecked Sendable {}
extension Koinos_Rpc_TransactionStore_transaction_store_response: @unchecked Sendable {}
extension Koinos_Rpc_TransactionStore_transaction_store_response.OneOf_Response: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "koinos.rpc.transaction_store"

extension Koinos_Rpc_TransactionStore_get_transactions_by_id_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_transactions_by_id_request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transaction_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.transactionIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transactionIds.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.transactionIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_TransactionStore_get_transactions_by_id_request, rhs: Koinos_Rpc_TransactionStore_get_transactions_by_id_request) -> Bool {
    if lhs.transactionIds != rhs.transactionIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_TransactionStore_get_transactions_by_id_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_transactions_by_id_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transactions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.transactions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transactions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transactions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_TransactionStore_get_transactions_by_id_response, rhs: Koinos_Rpc_TransactionStore_get_transactions_by_id_response) -> Bool {
    if lhs.transactions != rhs.transactions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_TransactionStore_transaction_store_request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".transaction_store_request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reserved"),
    2: .standard(proto: "get_transactions_by_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Koinos_Rpc_reserved_rpc?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .reserved(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .reserved(v)
        }
      }()
      case 2: try {
        var v: Koinos_Rpc_TransactionStore_get_transactions_by_id_request?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getTransactionsByID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getTransactionsByID(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .reserved?: try {
      guard case .reserved(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .getTransactionsByID?: try {
      guard case .getTransactionsByID(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_TransactionStore_transaction_store_request, rhs: Koinos_Rpc_TransactionStore_transaction_store_request) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Rpc_TransactionStore_transaction_store_response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".transaction_store_response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reserved"),
    2: .same(proto: "error"),
    3: .standard(proto: "get_transactions_by_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Koinos_Rpc_reserved_rpc?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .reserved(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .reserved(v)
        }
      }()
      case 2: try {
        var v: Koinos_Rpc_error_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .error(v)
        }
      }()
      case 3: try {
        var v: Koinos_Rpc_TransactionStore_get_transactions_by_id_response?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getTransactionsByID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getTransactionsByID(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .reserved?: try {
      guard case .reserved(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .getTransactionsByID?: try {
      guard case .getTransactionsByID(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Rpc_TransactionStore_transaction_store_response, rhs: Koinos_Rpc_TransactionStore_transaction_store_response) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
