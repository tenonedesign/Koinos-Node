// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: koinos/contracts/resources/resources.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Koinos_Contracts_Resources_market {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resourceSupply: UInt64 = 0

  var blockBudget: UInt64 = 0

  var blockLimit: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Contracts_Resources_resource_markets {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var diskStorage: Koinos_Contracts_Resources_market {
    get {return _diskStorage ?? Koinos_Contracts_Resources_market()}
    set {_diskStorage = newValue}
  }
  /// Returns true if `diskStorage` has been explicitly set.
  var hasDiskStorage: Bool {return self._diskStorage != nil}
  /// Clears the value of `diskStorage`. Subsequent reads from it will return its default value.
  mutating func clearDiskStorage() {self._diskStorage = nil}

  var networkBandwidth: Koinos_Contracts_Resources_market {
    get {return _networkBandwidth ?? Koinos_Contracts_Resources_market()}
    set {_networkBandwidth = newValue}
  }
  /// Returns true if `networkBandwidth` has been explicitly set.
  var hasNetworkBandwidth: Bool {return self._networkBandwidth != nil}
  /// Clears the value of `networkBandwidth`. Subsequent reads from it will return its default value.
  mutating func clearNetworkBandwidth() {self._networkBandwidth = nil}

  var computeBandwidth: Koinos_Contracts_Resources_market {
    get {return _computeBandwidth ?? Koinos_Contracts_Resources_market()}
    set {_computeBandwidth = newValue}
  }
  /// Returns true if `computeBandwidth` has been explicitly set.
  var hasComputeBandwidth: Bool {return self._computeBandwidth != nil}
  /// Clears the value of `computeBandwidth`. Subsequent reads from it will return its default value.
  mutating func clearComputeBandwidth() {self._computeBandwidth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _diskStorage: Koinos_Contracts_Resources_market? = nil
  fileprivate var _networkBandwidth: Koinos_Contracts_Resources_market? = nil
  fileprivate var _computeBandwidth: Koinos_Contracts_Resources_market? = nil
}

struct Koinos_Contracts_Resources_market_parameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blockBudget: UInt64 = 0

  var blockLimit: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Contracts_Resources_resource_parameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blockIntervalMs: UInt64 = 0

  var rcRegenMs: UInt64 = 0

  var decayConstant: UInt64 = 0

  var oneMinusDecayConstant: UInt64 = 0

  var printRatePremium: UInt64 = 0

  var printRatePrecision: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Contracts_Resources_set_resource_markets_parameters_arguments {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var diskStorage: Koinos_Contracts_Resources_market_parameters {
    get {return _diskStorage ?? Koinos_Contracts_Resources_market_parameters()}
    set {_diskStorage = newValue}
  }
  /// Returns true if `diskStorage` has been explicitly set.
  var hasDiskStorage: Bool {return self._diskStorage != nil}
  /// Clears the value of `diskStorage`. Subsequent reads from it will return its default value.
  mutating func clearDiskStorage() {self._diskStorage = nil}

  var networkBandwidth: Koinos_Contracts_Resources_market_parameters {
    get {return _networkBandwidth ?? Koinos_Contracts_Resources_market_parameters()}
    set {_networkBandwidth = newValue}
  }
  /// Returns true if `networkBandwidth` has been explicitly set.
  var hasNetworkBandwidth: Bool {return self._networkBandwidth != nil}
  /// Clears the value of `networkBandwidth`. Subsequent reads from it will return its default value.
  mutating func clearNetworkBandwidth() {self._networkBandwidth = nil}

  var computeBandwidth: Koinos_Contracts_Resources_market_parameters {
    get {return _computeBandwidth ?? Koinos_Contracts_Resources_market_parameters()}
    set {_computeBandwidth = newValue}
  }
  /// Returns true if `computeBandwidth` has been explicitly set.
  var hasComputeBandwidth: Bool {return self._computeBandwidth != nil}
  /// Clears the value of `computeBandwidth`. Subsequent reads from it will return its default value.
  mutating func clearComputeBandwidth() {self._computeBandwidth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _diskStorage: Koinos_Contracts_Resources_market_parameters? = nil
  fileprivate var _networkBandwidth: Koinos_Contracts_Resources_market_parameters? = nil
  fileprivate var _computeBandwidth: Koinos_Contracts_Resources_market_parameters? = nil
}

struct Koinos_Contracts_Resources_set_resource_markets_parameters_result {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Contracts_Resources_get_resource_markets_arguments {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Contracts_Resources_get_resource_markets_result {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Koinos_Contracts_Resources_resource_markets {
    get {return _value ?? Koinos_Contracts_Resources_resource_markets()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: Koinos_Contracts_Resources_resource_markets? = nil
}

struct Koinos_Contracts_Resources_set_resource_parameters_arguments {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Koinos_Contracts_Resources_resource_parameters {
    get {return _params ?? Koinos_Contracts_Resources_resource_parameters()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Koinos_Contracts_Resources_resource_parameters? = nil
}

struct Koinos_Contracts_Resources_set_resource_parameters_result {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Contracts_Resources_get_resource_parameters_arguments {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Koinos_Contracts_Resources_get_resource_parameters_result {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Koinos_Contracts_Resources_resource_parameters {
    get {return _value ?? Koinos_Contracts_Resources_resource_parameters()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: Koinos_Contracts_Resources_resource_parameters? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Koinos_Contracts_Resources_market: @unchecked Sendable {}
extension Koinos_Contracts_Resources_resource_markets: @unchecked Sendable {}
extension Koinos_Contracts_Resources_market_parameters: @unchecked Sendable {}
extension Koinos_Contracts_Resources_resource_parameters: @unchecked Sendable {}
extension Koinos_Contracts_Resources_set_resource_markets_parameters_arguments: @unchecked Sendable {}
extension Koinos_Contracts_Resources_set_resource_markets_parameters_result: @unchecked Sendable {}
extension Koinos_Contracts_Resources_get_resource_markets_arguments: @unchecked Sendable {}
extension Koinos_Contracts_Resources_get_resource_markets_result: @unchecked Sendable {}
extension Koinos_Contracts_Resources_set_resource_parameters_arguments: @unchecked Sendable {}
extension Koinos_Contracts_Resources_set_resource_parameters_result: @unchecked Sendable {}
extension Koinos_Contracts_Resources_get_resource_parameters_arguments: @unchecked Sendable {}
extension Koinos_Contracts_Resources_get_resource_parameters_result: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "koinos.contracts.resources"

extension Koinos_Contracts_Resources_market: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".market"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "resource_supply"),
    3: .standard(proto: "block_budget"),
    4: .standard(proto: "block_limit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.resourceSupply) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.blockBudget) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.blockLimit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.resourceSupply != 0 {
      try visitor.visitSingularUInt64Field(value: self.resourceSupply, fieldNumber: 1)
    }
    if self.blockBudget != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockBudget, fieldNumber: 3)
    }
    if self.blockLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockLimit, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_market, rhs: Koinos_Contracts_Resources_market) -> Bool {
    if lhs.resourceSupply != rhs.resourceSupply {return false}
    if lhs.blockBudget != rhs.blockBudget {return false}
    if lhs.blockLimit != rhs.blockLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Contracts_Resources_resource_markets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".resource_markets"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "disk_storage"),
    2: .standard(proto: "network_bandwidth"),
    3: .standard(proto: "compute_bandwidth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._diskStorage) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._networkBandwidth) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._computeBandwidth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._diskStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._networkBandwidth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._computeBandwidth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_resource_markets, rhs: Koinos_Contracts_Resources_resource_markets) -> Bool {
    if lhs._diskStorage != rhs._diskStorage {return false}
    if lhs._networkBandwidth != rhs._networkBandwidth {return false}
    if lhs._computeBandwidth != rhs._computeBandwidth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Contracts_Resources_market_parameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".market_parameters"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_budget"),
    2: .standard(proto: "block_limit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.blockBudget) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.blockLimit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockBudget != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockBudget, fieldNumber: 1)
    }
    if self.blockLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockLimit, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_market_parameters, rhs: Koinos_Contracts_Resources_market_parameters) -> Bool {
    if lhs.blockBudget != rhs.blockBudget {return false}
    if lhs.blockLimit != rhs.blockLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Contracts_Resources_resource_parameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".resource_parameters"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_interval_ms"),
    2: .standard(proto: "rc_regen_ms"),
    3: .standard(proto: "decay_constant"),
    4: .standard(proto: "one_minus_decay_constant"),
    5: .standard(proto: "print_rate_premium"),
    6: .standard(proto: "print_rate_precision"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.blockIntervalMs) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.rcRegenMs) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.decayConstant) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.oneMinusDecayConstant) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.printRatePremium) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.printRatePrecision) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockIntervalMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockIntervalMs, fieldNumber: 1)
    }
    if self.rcRegenMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.rcRegenMs, fieldNumber: 2)
    }
    if self.decayConstant != 0 {
      try visitor.visitSingularUInt64Field(value: self.decayConstant, fieldNumber: 3)
    }
    if self.oneMinusDecayConstant != 0 {
      try visitor.visitSingularUInt64Field(value: self.oneMinusDecayConstant, fieldNumber: 4)
    }
    if self.printRatePremium != 0 {
      try visitor.visitSingularUInt64Field(value: self.printRatePremium, fieldNumber: 5)
    }
    if self.printRatePrecision != 0 {
      try visitor.visitSingularUInt64Field(value: self.printRatePrecision, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_resource_parameters, rhs: Koinos_Contracts_Resources_resource_parameters) -> Bool {
    if lhs.blockIntervalMs != rhs.blockIntervalMs {return false}
    if lhs.rcRegenMs != rhs.rcRegenMs {return false}
    if lhs.decayConstant != rhs.decayConstant {return false}
    if lhs.oneMinusDecayConstant != rhs.oneMinusDecayConstant {return false}
    if lhs.printRatePremium != rhs.printRatePremium {return false}
    if lhs.printRatePrecision != rhs.printRatePrecision {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Contracts_Resources_set_resource_markets_parameters_arguments: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_resource_markets_parameters_arguments"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "disk_storage"),
    2: .standard(proto: "network_bandwidth"),
    3: .standard(proto: "compute_bandwidth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._diskStorage) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._networkBandwidth) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._computeBandwidth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._diskStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._networkBandwidth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._computeBandwidth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_set_resource_markets_parameters_arguments, rhs: Koinos_Contracts_Resources_set_resource_markets_parameters_arguments) -> Bool {
    if lhs._diskStorage != rhs._diskStorage {return false}
    if lhs._networkBandwidth != rhs._networkBandwidth {return false}
    if lhs._computeBandwidth != rhs._computeBandwidth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Contracts_Resources_set_resource_markets_parameters_result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_resource_markets_parameters_result"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_set_resource_markets_parameters_result, rhs: Koinos_Contracts_Resources_set_resource_markets_parameters_result) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Contracts_Resources_get_resource_markets_arguments: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_resource_markets_arguments"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_get_resource_markets_arguments, rhs: Koinos_Contracts_Resources_get_resource_markets_arguments) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Contracts_Resources_get_resource_markets_result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_resource_markets_result"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_get_resource_markets_result, rhs: Koinos_Contracts_Resources_get_resource_markets_result) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Contracts_Resources_set_resource_parameters_arguments: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_resource_parameters_arguments"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_set_resource_parameters_arguments, rhs: Koinos_Contracts_Resources_set_resource_parameters_arguments) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Contracts_Resources_set_resource_parameters_result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".set_resource_parameters_result"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_set_resource_parameters_result, rhs: Koinos_Contracts_Resources_set_resource_parameters_result) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Contracts_Resources_get_resource_parameters_arguments: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_resource_parameters_arguments"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_get_resource_parameters_arguments, rhs: Koinos_Contracts_Resources_get_resource_parameters_arguments) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Koinos_Contracts_Resources_get_resource_parameters_result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".get_resource_parameters_result"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Koinos_Contracts_Resources_get_resource_parameters_result, rhs: Koinos_Contracts_Resources_get_resource_parameters_result) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
